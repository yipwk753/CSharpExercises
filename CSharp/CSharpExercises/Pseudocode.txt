  \Integers
  i`Check If Number Is Composite
1. Get number from user
2. Create a boolean set to false
3. Account for if the user's number is positive or negative
4. Make a for loop with an integer initialized to 2 and the boolean condition set to the user's number divided by 2 plus or minus 1 depending on the sign of the user's number
5. If the user's number is divisible by the integer, set the boolean to true and break out of the loop

  i`Even Fibonacci Numbers
1. Repeat steps from the Fibonacci Sequence method
2. Create an integer set to 0
3. Account for if the user enters 1 or 2
4. In the for loop, for every number divisible by 2, add it to the integer

  i`Fibonacci Sequence
1. Get number from user
2. Create 3 integer variables with the first two set to 0 and 1
3. Create an int list variable and add the first two integer variables to it
4. Make a for loop with the boolean condition set to the user's number
5. Add the first two integer variables together and assign the result to the third variable and assign it to the int list variable
6. Assign the second integer to the first and the third integer to the second

  i`Find N-Prime
1. Get number from user
2. Create two integers set to 0 and 2
3. Create a while loop with the boolean condition set to user's number
4. Each loop check if the 2nd integer is prime; if true assign the value to the 1st integer and increment the 2nd integer

  i`Find Pythagorean Triplet
1. Get number from user
2. Create 4 integers and a double set to 0 and a boolean set to false
3. Create a for loop with the first integer set to 2 as the initializer and the boolean condition set to 3 of the integers added together being greater than the user's number
4. Create an inner for loop with the second integer set as the initializer and the boolean condition set to 3 of the integers added together being greater than the user's number
5. Each loop, square root the squares of the first 2 integers added together
6. If the squared integers from the two loops produced a perfect square, assign the square to the third integer
7. If all three integer's added together equal the user's number, set the boolean to true and multiply the three together and assign the result to the fourth integer; return all 4 integers and the boolean
8. If the inner loop completes, assign the first integer plus 1 to the second integer

  i`Find the least common denominator of two numbers
1. Get numbers from user
2. Compare the numbers to see which is smaller and put the smaller one in a temporary variable
3. Make a for loop with the boolean condition set to the two numbers multiplied together
4. Add the smaller number to the temp variable each loop
5. Check if the temp variable is divisible by both numbers

  i`FizzBuzz
1. Get number from user
2. Account for if the user's number is positive or negative
3. Make a for loop with an integer initialized to 1 or -1 depending on the number's sign and the boolean condition set to the user's number
4. If the integer is divisible by both 5 and 3, write "FizzBuzz"
5. Else if the integer is divisible by only 5, write "Fizz"
6. Else if the integer is divisible by only 3, write "Buzz"

  i`Get Factors Of Composite Number
1. Get number from user
2. Create an empty integer list
3. Account for if the user's number is positive or negative
4. Make a for loop with an integer initialized to 2 and the boolean condition set to the user's number divided by 2 plus or minus 1 depending on the sign of the user's number
5. If the user's number is divisible by the integer, add the integer to the list
6. If the list is not empty, the number is composite. Else, it is not.

  i`Largest palindrome product
1. Get two numbers from user
2. Create a boolean isPalindrome set to false
3. Make a for loop with the integer set to the user's first number and an inner loop with the integer set to the user's second number
4. Check if the product of the first and second number is a palindrome; if it is, set the boolean to true and break out of the loop

  i`Largest Prime Factor
1. Get number from user
2. Create a boolean isPrime set to false
3. Account for if the user enters 1
4. Make a for loop with the integer set to the user's number divided by 2
5. Set the boolean to true
6. Create an inner loop for any integer's that the user's number is divisible by
7. In the inner loop, set the integer to the divisible integer divided by 2
8. If the inner loop's integer is divisible, set the boolean to false and break out of the loop
9. If the inner loop has finished and the boolean is true, the loop's integer is the largest prime factor

  i`Largest Product In A Grid
1. Get 3 numbers from user
2. Generate grid based on user's first and second numbers
3. Create 2 integers based on the grid's lengths, 2 longs set to 0
4. Create a struct with the properties: 2 integer arrays to hold the values used to derive the product, a long to hold the product, a string to hold the direction, and 2 string arrays to hold the indexes used to derive the product
5. If the user's third number is greater than the grid's lengths, exit the program
6. If the grid's lengths are both 1, set default values for the grid and return it
7. Loop through the grid based on the user's third number multiplying the adjacent numbers in the same direction
8. If the product generated is greater than a previous product, assign it to the second long
9. If the current right index plus the user's third number is greater than the right-most bound, go to the next line
10. If the current left index plus the user's third number is greater than the bottom-most bound, break out of the loop
11. Update struct based on the loop that generates the greater product

  i`Largest Product In Series
1. Get a string of numbers and a number from user
2. Account for if the user's second number is greater than the count of the string
3. Create two longs set to 0
4. Create array of N-size where N is the user's string length and with a for loop populate each slot with the character in the string's N-location converted to an int
5. Create a for loop with the boolean condition set to the user's string length minus the user's second number plus 1
6. Set the second integer to 1
7. Each loop, create an inner for loop to multiply the array's current cell with the next N-1 cells where N is the user's number
8. After the inner loop has finished, if the product is greater than the integer, assign the value to the first integer
9. Account for if stack overflow occurs

  i`Multiples of 3 and 5
1. Get number from user
2. Account for if the user's number is positive or negative
3. Create an integer set to 0
4. Make a for loop with an integer initialized to 3 or -3 depending on the number's sign and the boolean condition set to the user's number
5. If the loop's integer is divisible by 3 or 5, add it to the integer created in step 3

  i`Prime number sieve
1. Get number from user
2. Get list of numbers from 1 to the user's number
3. Skip the first 3 numbers and iterate over the rest of the list
4. Make a for loop with the integer set to 2 and the boolean condition set to the square root of the iterated number plus 1
5. If the number is divisible by the integer, add it to a temporary list
6. Remove all numbers in the temporary list from the first list

  i`Smallest Multiple
1. Get number from user
2. Create an integer set to 0 and a boolean set to true
3. Create a for loop with the boolean condition set to the max for an int
4. Create an inner loop with integer set to the user's number and the boolean condition set to 0
5. If the outer integer is divisible by the inner integer, set the boolean to false and break out of the loop

  i`Sum Square Difference
1. Get number from user
2. Create three longs set to 0
3. Create a for loop with the boolean condition set to the user's number
4. Each loop, add each number to the second integer and square the result
5. Each loop, square each number and add it to the first number
6. Square the first number
6. Subtract the first integer from the second integer
7. Account for if stack overflow occurs

  i`Summation Of Primes
1. Get number from user
2. Create an integer set to 0
3. Create a for loop with the integer set to 2 and the boolean condition set to the user's number
4. If the loop's integer is prime, add it to the integer created in step 2

  \Strings
  s`Add Letters
1. Get string from user
2. Create dictionary to hold the values for each letter, A=1, B=2, etc.
3. Create an integer set to 0
4. Loop through the string, if the value is a key in the dictionary, add the key's value to the integer

  s`Check if a string is a palindrome
1. Get string from user
2. Create a boolean and set it to false
3. Reverse the string and assign the result to a new string
4. If the lower-cased reversed string and the lower-cased user's string are equal, set the boolean to true

  s`Count the vowels of a string
1. Get string from user
2. Create 6 integer variables for the 5 vowels and a count of all the vowels
3. Make a foreach loop for the user's string
4. Each loop, if a character from the string is a vowel, add it to the corresponding integer variable
5. Add up all of the vowels

  s`Reverse a sentence
1. Get sentence from user
2. Create a new StringBuilder variable
3. Split the sentence only on spaces into an array
4. Remove any empty values from the array
5. Account for if there's only one value in the array
6. Make a for loop with the integer initialized to the array's length minus 2 and the boolean condition set to 0
7. Each loop, get the word from the array and append it to the StringBuilder variable
8. Convert the StringBuilder variable to a string

  s`Reverse a string
1. Get string from user
2. Create a new StringBuilder variable
3. Make a for loop with an integer initialized to the length of the string minus 1 and the boolean condition set to 0
4. Each loop, get the character from the string variable using the integer for the place in the variable and append it to the StringBuilder variable
5. Convert the StringBuilder variable to a string